From 425a99b89d66f9452e63c8ed586b393aa9938423 Mon Sep 17 00:00:00 2001
From: Francesco Giacomini <francesco.giacomini@cnaf.infn.it>
Date: Tue, 2 Apr 2024 12:24:23 +0200
Subject: [PATCH 1/4] Open the randfile only if it exists

---
 src/sslutils/sslutils.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/sslutils/sslutils.c b/src/sslutils/sslutils.c
index 4fead093..54e0f43a 100644
--- a/src/sslutils/sslutils.c
+++ b/src/sslutils/sslutils.c
@@ -519,7 +519,7 @@ ERR_load_prxyerr_strings(
 
         randfile = RAND_file_name(buffer,200);
 
-        if (randfile)
+        if (randfile && access(randfile, "r") == 0)
         {
             RAND_load_file(randfile,1024L*1024L);
         }

From 2d20ec4782ae384df4bdef0cb58293d96174b376 Mon Sep 17 00:00:00 2001
From: Francesco Giacomini <francesco.giacomini@cnaf.infn.it>
Date: Tue, 2 Apr 2024 12:26:35 +0200
Subject: [PATCH 2/4] Fix the parsing of the REST API XML response

The depth of some fields was not correct for the response obtained
through the REST API, which is the first one tried and the only one that
will survive in the future with VOMS-AA.

In addition, VOMS-AA returns a numeric code for an error condition, not
a string like VOMS server.
---
 src/common/xmlcc.cc | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/common/xmlcc.cc b/src/common/xmlcc.cc
index 6f9fe372..bd43f3f1 100644
--- a/src/common/xmlcc.cc
+++ b/src/common/xmlcc.cc
@@ -491,7 +491,7 @@ static void endans(void *userdata, const char *name)
     a->num = atoi(a->value.c_str());
   }
   else if ((!strcmp(name, "message")) && 
-           (a->depth == 3)) {
+           (a->depth == 3 || a->depth == 2)) {
     a->message = a->value;
   }
   else if (!strcmp(name, "warning")) {
@@ -501,10 +501,10 @@ static void endans(void *userdata, const char *name)
     a->a->errs.push_back(e);
   }
   else if ((!strcmp(name, "code")) && 
-           (a->depth == 3)) {
+           (a->depth == 2)) {
     const char *msg = a->value.c_str();
 
-    if (!strcmp(msg, "NoSuchUser"))
+    if (!strcmp(msg, "NoSuchUser") || atoi(msg) == ERR_NOT_MEMBER)
       a->num = ERR_NOT_MEMBER;
     else if (!strcmp(msg, "SuspendedUser"))
       a->num = ERR_SUSPENDED;

From 4c487ab852155d90a7ce97792a804b513ceadcfa Mon Sep 17 00:00:00 2001
From: Francesco Giacomini <francesco.giacomini@cnaf.infn.it>
Date: Tue, 2 Apr 2024 12:31:03 +0200
Subject: [PATCH 3/4] Review the management of errors from the REST API

* Always process the errors, not only in case an AC has been returned
* For certain errors (user doesn't exist, is suspended, is inactive) do
  not try the legacy endpoint, which doesn't even exist for VOMS AA
* Leave some commented-out debug messages, to be possibly included in
  the output in debug mode (requires some work to propagate the debug
  flag)
---
 src/api/ccapi/voms_api.cc | 35 ++++++++++++++++++++++-------------
 1 file changed, 22 insertions(+), 13 deletions(-)

diff --git a/src/api/ccapi/voms_api.cc b/src/api/ccapi/voms_api.cc
index b617732a..bb84199b 100644
--- a/src/api/ccapi/voms_api.cc
+++ b/src/api/ccapi/voms_api.cc
@@ -247,21 +247,18 @@ bool vomsdata::InterpretOutput(const std::string &message, std::string& output)
 
     if (!a.ac.empty()) {
       output = a.ac;
-      if (a.errs.size() != 0) {
-        std::vector<errorp>::const_iterator end = a.errs.end();
-        for (std::vector<errorp>::const_iterator i = a.errs.begin();
-             i != end; ++i) {
-          serverrors += i->message;
-          if (i->num > ERROR_OFFSET)
-            result = false;
-          if (i->num == WARN_NO_FIRST_SELECT)
-            seterror(VERR_ORDER, "Cannot put requested attributes in the specified order.");
-        }
-      }
     }
     else if (!a.data.empty()) {
       output = a.data;
     }
+    for (std::vector<errorp>::const_iterator i = a.errs.begin(), end = a.errs.end();
+         i != end; ++i) {
+      serverrors += i->message;
+      if (i->num > ERROR_OFFSET)
+        result = false;
+      if (i->num == WARN_NO_FIRST_SELECT)
+        seterror(VERR_ORDER, "Cannot put requested attributes in the specified order.");
+    }
     if (!result && ver_type) {
       seterror(VERR_SERVERCODE, "The server returned an error.");
       return false;
@@ -289,9 +286,15 @@ bool vomsdata::ContactRaw(std::string hostname, int port, std::string servsubjec
   /* Try REST connection first */
   bool ret = ContactRESTRaw(hostname, port, command, raw, version, timeout);
 
-  if (ret)
+  if (ret
+      || serverrors.find("User unknown to this VO") != std::string::npos
+      || serverrors.find("suspended") != std::string::npos
+      || serverrors.find("not active") != std::string::npos)
     return ret;
 
+  // reset the errors
+  serverrors.clear();
+
   std::vector<std::string>::const_iterator end = targets.end();
   std::vector<std::string>::const_iterator begin = targets.begin();
   for (std::vector<std::string>::const_iterator i = begin; i != end; ++i) {
@@ -303,8 +306,12 @@ bool vomsdata::ContactRaw(std::string hostname, int port, std::string servsubjec
 
   comm = XML_Req_Encode(command, ordering, targs, duration);
 
-  if (!contact(hostname, port, servsubject, comm, buffer, subject, ca, timeout))
+  ret = contact(hostname, port, servsubject, comm, buffer, subject, ca, timeout);
+  // std::cerr << '\n' << comm << '\n' << buffer << '\n';
+
+  if (!ret) {
     return false;
+  }
 
   version = 1;
   return InterpretOutput(buffer, raw);
@@ -359,6 +366,8 @@ bool vomsdata::ContactRESTRaw(const std::string& hostname, int port, const std::
   std::string user, userca, output;
   bool res = contact(hostname, port, "", realCommand, output, user, userca, timeout);
 
+  // std::cerr << '\n' << realCommand << '\n' << output << '\n';
+
   bool ret = false;
 
   if (res) {

From 7ecb06e05c752be45f537b354c63a8940ccbed6f Mon Sep 17 00:00:00 2001
From: Francesco Giacomini <francesco.giacomini@cnaf.infn.it>
Date: Mon, 29 Apr 2024 15:30:02 +0200
Subject: [PATCH 4/4] Allocate a GENERAL_NAME before using it for a target

---
 src/ac/write.c | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/src/ac/write.c b/src/ac/write.c
index 783118b7..3a8ef27a 100644
--- a/src/ac/write.c
+++ b/src/ac/write.c
@@ -75,13 +75,18 @@ AC_TARGET* build_ac_target(char* t){
         ASN1_IA5STRING_free(target_str);
         return NULL;
     }
+    GENERAL_NAME *name = GENERAL_NAME_new();
+    if (! name) {
+        AC_TARGET_free(target);
+        ASN1_IA5STRING_free(target_str);
+        return NULL;
+    }
 
     ASN1_STRING_set(target_str, t, strlen(t));
 
-    GENERAL_NAME *name = target->name;
-
     name->type = GEN_URI;
     name->d.ia5 = target_str;
+    target->name = name;
 
     return target;
 }
