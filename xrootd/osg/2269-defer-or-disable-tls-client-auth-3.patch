From 7ad7fbdb5a2e508121d7eec0ea729c88f591c2f4 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Fri, 17 May 2024 21:44:38 +0200
Subject: [PATCH 3/3] Conditionally disable defer functionality on older
 OpenSSL versions

---
 src/XrdHttp/XrdHttpProtocol.cc | 13 +++++++++++--
 src/XrdTls/XrdTlsContext.cc    |  6 ++++++
 2 files changed, 17 insertions(+), 2 deletions(-)

diff --git a/src/XrdHttp/XrdHttpProtocol.cc b/src/XrdHttp/XrdHttpProtocol.cc
index c57f6a7..963783c 100644
--- a/src/XrdHttp/XrdHttpProtocol.cc
+++ b/src/XrdHttp/XrdHttpProtocol.cc
@@ -652,19 +652,20 @@ int XrdHttpProtocol::Process(XrdLink *lp) // We ignore the argument here
           return -1;
         }
 
-
+#if OPENSSL_VERSION_NUMBER >= 0x10100010L
         // We permit TLS client auth to be deferred until after the request path is sent.
         // If this is a path requiring client auth, then do that now.
         if (tlsClientAuth == XrdTlsContext::ClientAuthSetting::kDefer)
            {for (const auto &prefix : tlsAuthRequestPrefixes) {
                {if (!strncmp(prefix.c_str(), CurrentReq.resource.c_str(), prefix.length()))
                    {postheaderwait = true;
                     DoingLogin = true;
                     break;
                    }
                }
             }
            }
+#endif
       }
       else
         CurrentReq.parseLine((char *)tmpline.c_str(), rc);
@@ -695,6 +696,7 @@ int XrdHttpProtocol::Process(XrdLink *lp) // We ignore the argument here
   }
 
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100010L
   if (postheaderwait) {
     postheaderwait = false;
     if (SSL_verify_client_post_handshake(ssl) != 1) {
@@ -734,6 +736,7 @@ int XrdHttpProtocol::Process(XrdLink *lp) // We ignore the argument here
       return -1;
     }
   }
+#endif
 
   // If we are in self-redirect mode, then let's do it
   // Do selfredirect only with 'simple' requests, otherwise poor clients may misbehave
@@ -2900,7 +2903,13 @@ int XrdHttpProtocol::xtlsclientauth(XrdOucStream &Config) {
       return 0;
      }
   if (!strcmp(val, "defer"))
-     {tlsClientAuth = XrdTlsContext::ClientAuthSetting::kDefer;
+     {
+#if OPENSSL_VERSION_NUMBER >= 0x10100010L
+     tlsClientAuth = XrdTlsContext::ClientAuthSetting::kDefer;
+#else
+     eDest.Emsg("config", "http.tlsclientauth defer is not supported on this platform");
+     return 1;
+#endif
      }
 
   eDest.Emsg("config", "invalid tlsclientauth parameter -", val);
diff --git a/src/XrdTls/XrdTlsContext.cc b/src/XrdTls/XrdTlsContext.cc
index 741d6d2..b4b5d73 100644
--- a/src/XrdTls/XrdTlsContext.cc
+++ b/src/XrdTls/XrdTlsContext.cc
@@ -1142,7 +1142,13 @@ void XrdTlsContext::SetTlsClientAuth(ClientAuthSetting setting) {
          SSL_CTX_set_verify(pImpl->ctx, SSL_VERIFY_NONE, 0);
          break;
       case kDefer:
+#if OPENSSL_VERSION_NUMBER < 0x10100010L
+         // Post-handhsake auth was added in OpenSSL version 1.1.1; for older version,
+         // simply switch to always request client certificates.
+         SSL_CTX_set_verify(pImpl->ctx, SSL_VERIFY_PEER, (LogVF ? VerCB : 0));
+#else
          SSL_CTX_set_verify(pImpl->ctx, SSL_VERIFY_PEER | SSL_VERIFY_POST_HANDSHAKE, (LogVF ? VerCB : 0));
+#endif
          break;
       }
 }
-- 
2.43.0

