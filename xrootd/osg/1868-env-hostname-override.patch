From e827f06fec2747894403f1a15f7f74df9a93a9f7 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Thu, 15 Dec 2022 09:20:50 -0600
Subject: [PATCH 1/5] Provide a mechanism to override the detected hostname by
 environment variable.

Note the `myName` variable needed to be changed to a string as it must own
the memory; the memory pointed to by `getenv` my change after future `setenv` calls.
---
 src/Xrd/XrdConfig.cc | 26 +++++++++++++++++---------
 src/Xrd/XrdConfig.hh |  3 ++-
 2 files changed, 19 insertions(+), 10 deletions(-)

diff --git a/src/Xrd/XrdConfig.cc b/src/Xrd/XrdConfig.cc
index f1d13566509..a2b3d5dceb3 100644
--- a/src/Xrd/XrdConfig.cc
+++ b/src/Xrd/XrdConfig.cc
@@ -572,11 +572,19 @@ int XrdConfig::Configure(int argc, char **argv)
 // run in v4 mode and that doesn't get set until after the options are scanned.
 //
    static XrdNetAddr *myIPAddr = new XrdNetAddr((int)0);
-   if (!(myName = myIPAddr->Name(0, &temp))) myName = "";
+   auto envName = getenv("XRDHOST");
+   const char *ipAddrName;
+   if (envName) {
+      myName = envName;
+   } else if ((ipAddrName = myIPAddr->Name(0, &temp))) {
+      myName = ipAddrName;
+   } else {
+      myName = "";
+   }
 
 // Get our IP address and FQN
 //
-   ProtInfo.myName = myName;
+   ProtInfo.myName = myName.c_str();
    ProtInfo.myAddr = myIPAddr->SockAddr();
    ProtInfo.myInst = XrdOucUtils::InstName(myInsName);
    ProtInfo.myProg = myProg;
@@ -585,11 +593,11 @@ int XrdConfig::Configure(int argc, char **argv)
 // XRDINSTANCE=<pgm> <instance name>@<host name>
 //                 XrdOucEnv::Export("XRDINSTANCE")
 //
-   sprintf(buff,"%s%s %s@%s", xrdInst, myProg, ProtInfo.myInst, myName);
+   sprintf(buff,"%s%s %s@%s", xrdInst, myProg, ProtInfo.myInst, myName.c_str());
    myInstance = strdup(buff);
    putenv(myInstance);   // XrdOucEnv::Export("XRDINSTANCE",...)
    myInstance += strlen(xrdInst);
-   XrdOucEnv::Export("XRDHOST", myName);
+   XrdOucEnv::Export("XRDHOST", myName.c_str());
    XrdOucEnv::Export("XRDNAME", ProtInfo.myInst);
    XrdOucEnv::Export("XRDPROG", myProg);
 
@@ -608,7 +616,7 @@ int XrdConfig::Configure(int argc, char **argv)
 // We can't really continue without some kind of name at this point. Note that
 // vriable temp should still be valid from the previous NetAddr call.
 //
-   if (!(*myName))
+   if (myName.empty())
       {Log.Emsg("Config", "Unable to determine host name; ",
                            (temp ? temp : "reason unknown"),
                            "; execution terminated.");
@@ -633,13 +641,13 @@ int XrdConfig::Configure(int argc, char **argv)
 // Otherwise, determine our domain name.
 //
    if (!myIPAddr->isRegistered())
-      {Log.Emsg("Config",myName,"does not appear to be registered in the DNS.");
+      {Log.Emsg("Config",myName.c_str(),"does not appear to be registered in the DNS.");
        Log.Emsg("Config","Verify that the '/etc/hosts' file is correct and "
                          "this machine is registered in DNS.");
        Log.Emsg("Config", "Execution continues but connection failures may occur.");
        myDomain = 0;
-      } else if (!(myDomain = index(myName, '.')))
-                Log.Say("Config warning: this hostname, ", myName,
+      } else if (!(myDomain = index(myName.c_str(), '.')))
+                Log.Say("Config warning: this hostname, ", myName.c_str(),
                             ", is registered without a domain qualification.");
 
 // Setup the initial required protocol.
@@ -1885,7 +1893,7 @@ int XrdConfig::xport(XrdSysError *eDest, XrdOucStream &Config)
     strncpy(cport, val, sizeof(cport)-1); cport[sizeof(cport)-1] = '\0';
 
     if ((val = Config.GetWord()) && !strcmp("if", val))
-       if ((rc = XrdOucUtils::doIf(eDest,Config, "port directive", myName,
+       if ((rc = XrdOucUtils::doIf(eDest,Config, "port directive", myName.c_str(),
                               ProtInfo.myInst, myProg)) <= 0)
           {if (!rc) Config.noEcho(); return (rc < 0);}
 
diff --git a/src/Xrd/XrdConfig.hh b/src/Xrd/XrdConfig.hh
index a06ad462f4e..0c89bddd2b6 100644
--- a/src/Xrd/XrdConfig.hh
+++ b/src/Xrd/XrdConfig.hh
@@ -30,6 +30,7 @@
 /******************************************************************************/
 
 #include <vector>
+#include <string>
 
 #include "Xrd/XrdProtLoad.hh"
 #include "Xrd/XrdProtocol.hh"
@@ -94,7 +95,7 @@ static const char  *TraceID;
 XrdNetSecurity     *Police;
 XrdTcpMonInfo      *tmoInfo;
 const char         *myProg;
-const char         *myName;
+std::string         myName;
 const char         *myDomain;
 const char         *mySitName;
 const char         *myInsName;

From eb6e38976a8f8b631dc8243fd8b649a9a8306855 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Mon, 19 Dec 2022 13:48:47 -0600
Subject: [PATCH 2/5] Have redirector prefer the host's stated name over IP
 address.

---
 src/XrdCms/XrdCmsProtocol.cc | 67 +++++++-----------------------------
 1 file changed, 12 insertions(+), 55 deletions(-)

diff --git a/src/XrdCms/XrdCmsProtocol.cc b/src/XrdCms/XrdCmsProtocol.cc
index 226c3eb317e..870a2cc938b 100644
--- a/src/XrdCms/XrdCmsProtocol.cc
+++ b/src/XrdCms/XrdCmsProtocol.cc
@@ -564,30 +564,6 @@ int XrdCmsProtocol::Stats(char *buff, int blen, int do_sync)
 /******************************************************************************/
 /*                                 A d m i t                                  */
 /******************************************************************************/
-
-namespace
-{
-char *getAltName(char *sid, char *buff, int blen)
-{
-   char *atsign, *spacec, *retval = 0;
-   int  n;
-   if (sid)
-   if ((atsign = index(sid, '@')))
-      {atsign++;
-       if ((spacec = index(atsign, ' ')))
-          {*spacec = 0;
-           n = strlen(atsign);
-           if (n > 3 && n < blen)
-              {strcpy(buff, atsign);
-               retval = buff;
-              }
-           *spacec = ' ';
-          }
-      }
-   return retval;
-}
-}
-
 XrdCmsRouting *XrdCmsProtocol::Admit()
 {
    EPNAME("Admit");
@@ -623,37 +599,18 @@ XrdCmsRouting *XrdCmsProtocol::Admit()
 // Construct environment for incoming node
 //
    XrdOucEnv cgiEnv((const char *)Data.envCGI);
-
-// We have this problem hat many times the IPv6 address is missing the ptr
-// record in DNS. If this node is IPv6 unregistered and the incoming node
-// supplied it's host name then we can attempt to register it locally.
-//
-   if (!(Link->AddrInfo()->isRegistered())
-   &&    Link->AddrInfo()->isIPType(XrdNetAddrInfo::IPv6))
-      {const char *altName = cgiEnv.Get("myHN");
-       const char *altType = "stated mapping";
-       char hBF[256], *oldName = strdup(Link->Host());
-       if (!altName) {altName = getAltName((char *)Data.SID, hBF, sizeof(hBF));
-                      altType = "inferred mapping";
-                     }
-       Say.Emsg("Protocol", "DNS lookup for", oldName, "failed; "
-                            "IPv6 ptr record missing!");
-       if (!altName)
-          {Say.Emsg("Protocol", oldName, "did not supply a fallback "
-                                         "mapping; using IPv6 address.");
-          } else {
-           char buff[512];
-           snprintf(buff, sizeof(buff), "%s -> %s", oldName, altName);
-           Say.Emsg("Protocol", "Attempting to use", altType, buff);
-           if (!(Link->Register(altName)))
-              {Say.Emsg("Protocol", buff, altType,"failed; address mismatch.");
-              } else {
-               Say.Emsg("Protocol", oldName,
-                        "is now locally registered as", altName);
-              }
-          }
-       free(oldName);
-      }
+   const char *altName = cgiEnv.Get("myHN");
+   if (altName) {
+     std::string oldName(Link->Host());
+     char buff[512];
+     snprintf(buff, sizeof(buff), "%s -> %s", oldName.c_str(), altName);
+     Say.Emsg("Protocol", "Attempting to use stated mapping", buff);
+     if (!(Link->Register(altName))) {
+       Say.Emsg("Protocol", buff, "stated mapping failed; address mismatch.");
+     } else {
+       Say.Emsg("Protocol", oldName.c_str(), "is now locally registered as", altName);
+     }
+   }
 
 // Handle Redirectors here (minimal stuff to do)
 //

From 167f380dd4b9aa064a6ad9db1b8a4b84c9619116 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Thu, 22 Dec 2022 08:01:10 -0600
Subject: [PATCH 3/5] Do not bail if link's IP address does not match forward
 resolution

If the redirector and data server are both inside the same Kubernetes
instance, it is quite possible the internal route is taken between
the two pods, meaning there's an internal IP address on the socket.

Always prefer the data server-provided hostname over any sort of DNS
setup.
---
 src/Xrd/XrdLinkXeq.cc | 4 ----
 1 file changed, 4 deletions(-)

diff --git a/src/Xrd/XrdLinkXeq.cc b/src/Xrd/XrdLinkXeq.cc
index ccfcd4f4fd8..e9a5d98781e 100644
--- a/src/Xrd/XrdLinkXeq.cc
+++ b/src/Xrd/XrdLinkXeq.cc
@@ -589,10 +589,6 @@ int XrdLinkXeq::RecvIOV(const struct iovec *iov, int iocnt)
 bool XrdLinkXeq::Register(const char *hName)
 {
 
-// First see if we can register this name with the address object
-//
-   if (!Addr.Register(hName)) return false;
-
 // Make appropriate changes here
 //
    if (HostName) free(HostName);

From 24eb035b63056f39250fddba8698b8a29c0d8aad Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Thu, 22 Dec 2022 09:21:00 -0600
Subject: [PATCH 4/5] Give cmsd the concept of a 'public hostname'

Have the cmsd use the name provided by the remote data server, bypassing
the logic of interface-specific names or addresses.

Could serve as the basis for the idea of a 'public mode' where the
cluster operators are responsible for ensuring the hostnames are
properly registered.
---
 src/XrdCms/XrdCmsCluster.cc | 11 ++++-----
 src/XrdCms/XrdCmsNode.cc    |  2 ++
 src/XrdNet/XrdNetIF.cc      | 18 +++++++++++++-
 src/XrdNet/XrdNetIF.hh      | 49 +++++++++++++++++++++++++++++++++++++
 4 files changed, 73 insertions(+), 7 deletions(-)

diff --git a/src/XrdCms/XrdCmsCluster.cc b/src/XrdCms/XrdCmsCluster.cc
index 7649ebdde6e..428a548d7d9 100644
--- a/src/XrdCms/XrdCmsCluster.cc
+++ b/src/XrdCms/XrdCmsCluster.cc
@@ -556,8 +556,7 @@ XrdCmsSelected *XrdCmsCluster::List(SMask_t mask, CmsLSOpts opts, bool &oksel)
                      }
                }
             sip = new XrdCmsSelected(sipp);
-                 if (retDest) destLen = nP->netIF.GetDest(sip->Ident, iSize,
-                                                          ifGet, retName);
+                 if (retDest) destLen = nP->netIF.GetPublicDest(sip->Ident, iSize);
             else if (nP->myNlen >= XrdCmsSelected::IdentSize) destLen = 0;
             else {strcpy(sip->Ident, nP->myName); destLen = nP->myNlen;}
             if (!destLen) {delete sip; continue;}
@@ -1116,7 +1115,7 @@ int XrdCmsCluster::Select(SMask_t pmask, int &port, char *hbuff, int &hlen,
    if (isMulti || baseFS.isDFS())
       {STMutex.ReadLock();
        nP = (Config.sched_RR ? SelbyRef(pmask,selR) : SelbyLoad(pmask,selR));
-       if (nP) hlen = nP->netIF.GetName(hbuff, port, nType) + 1;
+       if (nP) hlen = nP->netIF.GetPublicName(hbuff, port) + 1;
           else hlen = 0;
        STMutex.UnLock();
        return hlen != 1;
@@ -1147,7 +1146,7 @@ int XrdCmsCluster::Select(SMask_t pmask, int &port, char *hbuff, int &hlen,
 // At this point either we have a node or we do not
 //
    if (nP)
-      {hlen = nP->netIF.GetName(hbuff, port, nType) + 1;
+      {hlen = nP->netIF.GetPublicName(hbuff, port) + 1;
        nP->RefR++;
        STMutex.UnLock();
        return hlen != 1;
@@ -1626,7 +1625,7 @@ int XrdCmsCluster::SelNode(XrdCmsSelect &Sel, SMask_t pmask, SMask_t amask)
 //
    if (nP)
       {nP->g2nLock(STMutex);
-       Sel.Resp.DLen = nP->netIF.GetName(Sel.Resp.Data, Sel.Resp.Port, nType);
+       Sel.Resp.DLen = nP->netIF.GetPublicName(Sel.Resp.Data, Sel.Resp.Port);
        if (!Sel.Resp.DLen) {nP->UnLock(); return Unreachable(Sel, false);}
        Sel.Resp.DLen++; Sel.smask = nP->NodeMask;
 
@@ -1683,7 +1682,7 @@ int XrdCmsCluster::SelNode(XrdCmsSelect &Sel, SMask_t pmask, SMask_t amask)
        if ((mask = (pmask | amask) & peerHost)) nP = SelbyCost(mask, selR);
        if (nP)
           {nP->g2nLock(STMutex);
-           Sel.Resp.DLen = nP->netIF.GetName(Sel.Resp.Data,Sel.Resp.Port,nType);
+           Sel.Resp.DLen = nP->netIF.GetPublicName(Sel.Resp.Data,Sel.Resp.Port);
            if (!Sel.Resp.DLen) {nP->UnLock(); return Unreachable(Sel, false);}
            Sel.Resp.DLen++; Sel.smask = nP->NodeMask;
            if (Sel.iovN && Sel.iovP) nP->Send(Sel.iovP, Sel.iovN);
diff --git a/src/XrdCms/XrdCmsNode.cc b/src/XrdCms/XrdCmsNode.cc
index b453523b805..dce904b9275 100644
--- a/src/XrdCms/XrdCmsNode.cc
+++ b/src/XrdCms/XrdCmsNode.cc
@@ -166,6 +166,8 @@ void XrdCmsNode::setName(XrdLink *lnkp, const char *theIF, int port)
    netIF.SetIF(&netID, theIF, port);
    hasNet = netIF.Mask();
 
+   netIF.SetPublicName(hname);
+
 // Construct our identification
 //
    myName = strdup(hname);
diff --git a/src/XrdNet/XrdNetIF.cc b/src/XrdNet/XrdNetIF.cc
index 8d004c32198..9b9630c5137 100644
--- a/src/XrdNet/XrdNetIF.cc
+++ b/src/XrdNet/XrdNetIF.cc
@@ -404,7 +404,23 @@ int XrdNetIF::GetDest(char *dest, int dlen, ifType ifT, bool prefn)
    strcpy(dest +ifP->iLen, portSfx.val);
    return n;
 }
-  
+
+
+/******************************************************************************/
+/*                               G e t P u b l i c D e s t                    */
+/******************************************************************************/
+
+int XrdNetIF::GetPublicDest(char *dest, size_t dlen)
+{
+    auto n = m_PublicName.size() + portSfx.len;
+    if (m_PublicName.empty() || n >= dlen) return 0;
+
+    strcpy(dest, m_PublicName.c_str());
+    strcpy(dest + m_PublicName.size(), portSfx.val);
+
+    return n;
+}
+
 /******************************************************************************/
 /*                                 G e t I F                                  */
 /******************************************************************************/
diff --git a/src/XrdNet/XrdNetIF.hh b/src/XrdNet/XrdNetIF.hh
index b369566222e..849b67e1d3d 100644
--- a/src/XrdNet/XrdNetIF.hh
+++ b/src/XrdNet/XrdNetIF.hh
@@ -32,6 +32,7 @@
 
 #include <cstdlib>
 #include <cstring>
+#include <string>
 
 //------------------------------------------------------------------------------
 //! The XrdNetIF class handles host interfaces. It is used to obtain the
@@ -89,6 +90,18 @@ public:
 
        int  GetDest(char *dest, int dlen, ifType ifT=PublicV6, bool prefn=false);
 
+//------------------------------------------------------------------------------
+//! Get the public interface name with a port number.
+//!
+//! @param  dest  Pointer to the buffer where dest will be placed.
+//! @param  dlen  The length of the buffer.
+//!
+//! @return The length of the name whose pointer is placed in name.
+//!         A value of zero indicates that the buffer was too small.
+//------------------------------------------------------------------------------
+
+       int  GetPublicDest(char *dest, size_t dlen);
+
 //------------------------------------------------------------------------------
 //! Get the interface name without a port number.
 //!
@@ -123,6 +136,39 @@ inline int  GetName(char *nbuff, int &nport, ifType ifT=PublicV6)
                     return ifName[ifT]->iLen;
                    }
 
+//------------------------------------------------------------------------------
+//! Get the interface public hostname, not relying on reverse DNS of the IP
+//! addresses.
+//!
+//! @param  nbuff Reference to buffer where the name will be placed. It must
+//!               be at least 256 bytes in length.
+//! @param  nport Place where the port number will be placed.
+//!
+//! @return The length of the name copied into the buffer.
+//!         A value of zero indicates that no such interface exists.
+//------------------------------------------------------------------------------
+int GetPublicName(char *nbuff, int &nport)
+{
+    strcpy(nbuff, m_PublicName.c_str());
+    nport = ifPort;
+    return m_PublicName.size();
+}
+
+//------------------------------------------------------------------------------
+//! Sets the 'public name' to use associated with this interface.
+//!
+//! @param  name New public name to utilize.
+//!
+//! @return True if the name is a valid hostname; false otherwise.
+//------------------------------------------------------------------------------
+bool SetPublicName(const std::string &name)
+{
+    // TODO: Actually validate this is an acceptable DNS name.
+    if (name.size() > 255) return false;
+    m_PublicName = name;
+    return true;
+}
+
 //------------------------------------------------------------------------------
 //! Obtain an easily digestable list of IP routable interfaces to this machine.
 //!
@@ -433,6 +479,9 @@ short          ifRoute;
 char           ifMask;
 char           ifAvail;
 
+// The public hostname of the interface.
+std::string    m_PublicName;
+
 static
 XrdSysError   *eDest;
 static

From 459a5c7227b80f33aa58af5de2c28281124aa337 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Tue, 27 Dec 2022 08:00:39 -0600
Subject: [PATCH 5/5] Only utilize the hostname when an explicit override is in
 place.

Testing on the OSDF production redirector revealed that there's a
large variety of hostnames in use.  Until we get these sorted out,
make the preference to use the hostname from the remote cmsd an
opt-in feature.
---
 src/Xrd/XrdConfig.cc          | 1 +
 src/XrdCms/XrdCmsClientMan.cc | 9 +++++++--
 src/XrdCms/XrdCmsConfig.cc    | 5 +++++
 src/XrdCms/XrdCmsProtocol.cc  | 2 +-
 4 files changed, 14 insertions(+), 3 deletions(-)

diff --git a/src/Xrd/XrdConfig.cc b/src/Xrd/XrdConfig.cc
index a2b3d5dceb3..5965307c72f 100644
--- a/src/Xrd/XrdConfig.cc
+++ b/src/Xrd/XrdConfig.cc
@@ -576,6 +576,7 @@ int XrdConfig::Configure(int argc, char **argv)
    const char *ipAddrName;
    if (envName) {
       myName = envName;
+      XrdOucEnv::Export("OVERRIDEXRDHOST", myName.c_str());
    } else if ((ipAddrName = myIPAddr->Name(0, &temp))) {
       myName = ipAddrName;
    } else {
diff --git a/src/XrdCms/XrdCmsClientMan.cc b/src/XrdCms/XrdCmsClientMan.cc
index 9f529419518..677b64da375 100644
--- a/src/XrdCms/XrdCmsClientMan.cc
+++ b/src/XrdCms/XrdCmsClientMan.cc
@@ -323,7 +323,7 @@ int XrdCmsClientMan::Hookup()
    EPNAME("Hookup");
    CmsLoginData Data;
    XrdLink *lp;
-   char buff[256], hnBuff[264];
+   char buff[256], hnBuff[264*2+1];
    kXR_char *envData = 0;
    int rc, oldWait, tries = 12, opts = 0;
 
@@ -336,7 +336,12 @@ int XrdCmsClientMan::Hookup()
 // Report our hostname (there are better ways of doing this)
 //
    const char *hn = getenv("XRDHOST");
-   if (hn)
+   const char *override_hn = getenv("OVERRIDEXRDHOST");
+   if (hn && override_hn)
+      {snprintf(hnBuff, sizeof(hnBuff), "myHN=%s&ovHN=%s", hn, override_hn);
+       envData = (kXR_char *)hnBuff;
+      }
+   else if (hn)
       {snprintf(hnBuff, sizeof(hnBuff), "myHN=%s", hn);
        envData = (kXR_char *)hnBuff;
       }
diff --git a/src/XrdCms/XrdCmsConfig.cc b/src/XrdCms/XrdCmsConfig.cc
index 9512df778d6..89370145753 100644
--- a/src/XrdCms/XrdCmsConfig.cc
+++ b/src/XrdCms/XrdCmsConfig.cc
@@ -415,6 +415,11 @@ int XrdCmsConfig::Configure2()
 //
    envData += "myHN=";
    envData += myName;
+   const char *override_hn = getenv("OVERRIDEXRDHOST");
+   if (override_hn)
+      {envData += "&ovHN=";
+       envData += override_hn;
+      }
 
 // Print herald
 //
diff --git a/src/XrdCms/XrdCmsProtocol.cc b/src/XrdCms/XrdCmsProtocol.cc
index 870a2cc938b..018b819d46c 100644
--- a/src/XrdCms/XrdCmsProtocol.cc
+++ b/src/XrdCms/XrdCmsProtocol.cc
@@ -599,7 +599,7 @@ XrdCmsRouting *XrdCmsProtocol::Admit()
 // Construct environment for incoming node
 //
    XrdOucEnv cgiEnv((const char *)Data.envCGI);
-   const char *altName = cgiEnv.Get("myHN");
+   const char *altName = cgiEnv.Get("ovHN");
    if (altName) {
      std::string oldName(Link->Host());
      char buff[512];
