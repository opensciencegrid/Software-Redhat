From 0e1c3df72722bfbe795b3df1a1cb3f2ccb00ddb3 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Wed, 15 May 2024 09:13:09 +0200
Subject: [PATCH 1/2] Fix non-monotonic clock in the throttle

After plotting the aggregate I/O throttle time in Prometheus, we were
surprised to see the graph was non-monotonic (and didn't match the read
time when we put in some fixed sleep times)!  This commit fixes two
bugs:
- The wrong clock was used; this used CPU-time, not wall time.
- Incorrect algorithm for normalizing the total time so the nanosecond
  field didn't represent more than one second.
---
 src/XrdThrottle/XrdThrottleManager.cc | 5 ++---
 src/XrdThrottle/XrdThrottleManager.hh | 2 +-
 2 files changed, 3 insertions(+), 4 deletions(-)

diff --git a/src/XrdThrottle/XrdThrottleManager.cc b/src/XrdThrottle/XrdThrottleManager.cc
index 651bd6d9baf..7c478aef027 100644
--- a/src/XrdThrottle/XrdThrottleManager.cc
+++ b/src/XrdThrottle/XrdThrottleManager.cc
@@ -19,8 +19,7 @@ const
 int XrdThrottleManager::m_max_users = 1024;
 
 #if defined(__linux__) || defined(__GNU__) || (defined(__FreeBSD_kernel__) && defined(__GLIBC__))
-int clock_id;
-int XrdThrottleTimer::clock_id = clock_getcpuclockid(0, &clock_id) != ENOENT ? CLOCK_THREAD_CPUTIME_ID : CLOCK_MONOTONIC;
+clockid_t XrdThrottleTimer::clock_id = CLOCK_MONOTONIC;
 #else
 int XrdThrottleTimer::clock_id = 0;
 #endif
@@ -441,7 +440,7 @@ XrdThrottleManager::RecomputeInternal()
    while (m_stable_io_wait.tv_nsec > 1000000000)
    {
       m_stable_io_wait.tv_nsec -= 1000000000;
-      m_stable_io_wait.tv_nsec --;
+      m_stable_io_wait.tv_sec ++;
    }
    struct timespec io_wait_ts;
    io_wait_ts.tv_sec = m_stable_io_wait.tv_sec;
diff --git a/src/XrdThrottle/XrdThrottleManager.hh b/src/XrdThrottle/XrdThrottleManager.hh
index 6f292ac7c82..53838758a8b 100644
--- a/src/XrdThrottle/XrdThrottleManager.hh
+++ b/src/XrdThrottle/XrdThrottleManager.hh
@@ -219,7 +219,7 @@ private:
 XrdThrottleManager &m_manager;
 struct timespec m_timer;
 
-static int clock_id;
+static clockid_t clock_id;
 };
 
 #endif

From 9854912cd21ff26b0e4e09886db8dc60f456ede3 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Wed, 15 May 2024 09:17:10 +0200
Subject: [PATCH 2/2] Enable throttle manager timing on Mac OS X

With the change to a POSIX-specified clock, all the needed functions
are available in OS X.
---
 src/XrdThrottle/XrdThrottleManager.cc | 2 +-
 src/XrdThrottle/XrdThrottleManager.hh | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/XrdThrottle/XrdThrottleManager.cc b/src/XrdThrottle/XrdThrottleManager.cc
index 7c478aef027..d1daec7cc09 100644
--- a/src/XrdThrottle/XrdThrottleManager.cc
+++ b/src/XrdThrottle/XrdThrottleManager.cc
@@ -18,7 +18,7 @@ XrdThrottleManager::TraceID = "ThrottleManager";
 const
 int XrdThrottleManager::m_max_users = 1024;
 
-#if defined(__linux__) || defined(__GNU__) || (defined(__FreeBSD_kernel__) && defined(__GLIBC__))
+#if defined(__linux__) || defined(__APPLE__) || defined(__GNU__) || (defined(__FreeBSD_kernel__) && defined(__GLIBC__))
 clockid_t XrdThrottleTimer::clock_id = CLOCK_MONOTONIC;
 #else
 int XrdThrottleTimer::clock_id = 0;
diff --git a/src/XrdThrottle/XrdThrottleManager.hh b/src/XrdThrottle/XrdThrottleManager.hh
index 53838758a8b..8d43a4123de 100644
--- a/src/XrdThrottle/XrdThrottleManager.hh
+++ b/src/XrdThrottle/XrdThrottleManager.hh
@@ -167,7 +167,7 @@ public:
 void StopTimer()
 {
    struct timespec end_timer = {0, 0};
-#if defined(__linux__) || defined(__GNU__) || (defined(__FreeBSD_kernel__) && defined(__GLIBC__))
+#if defined(__linux__) || defined(__APPLE__) || defined(__GNU__) || (defined(__FreeBSD_kernel__) && defined(__GLIBC__))
    int retval = clock_gettime(clock_id, &end_timer);
 #else
    int retval = -1;
@@ -203,7 +203,7 @@ protected:
 XrdThrottleTimer(XrdThrottleManager & manager) :
    m_manager(manager)
 {
-#if defined(__linux__) || defined(__GNU__) || (defined(__FreeBSD_kernel__) && defined(__GLIBC__))
+#if defined(__linux__) || defined(__APPLE__) || defined(__GNU__) || (defined(__FreeBSD_kernel__) && defined(__GLIBC__))
    int retval = clock_gettime(clock_id, &m_timer);
 #else
    int retval = -1;
