Index: src/voms/lcmaps_voms_localaccount.c
===================================================================
--- src/voms/lcmaps_voms_localaccount.c	(revision 18751)
+++ src/voms/lcmaps_voms_localaccount.c	(working copy)
@@ -45,7 +45,7 @@
     \section vomslocalaccountsyn SYNOPSIS
     \b lcmaps_voms_localaccount.mod
         [-gridmapfile|-GRIDMAPFILE|-gridmap|-GRIDMAP \<location gridmapfile\>]
-        [-use_voms_gid]
+        [-use_voms_gid] [-first-fqan|-all-fqans]
 
     \section vomslocalaccountdesc DESCRIPTION
 
@@ -94,6 +94,16 @@
         "lcmaps_voms_poolgroup.mod" to assign a primary GID based on the VOMS attributes contained in the 
         user proxy instead of taking the default primary GID that comes with the local account.
 
+    \subsection vomslocalaccountoptie6 -first-fqan
+        When this option is set, this plugin will only consider the first FQAN for each VO when
+        consider the mapping.  Any additional FQANs will be ignored.  The explicit setting of this flag
+        will override any defaults.  The first FQAN logic is the current default, but this may change
+        in the future.
+         
+    \subsection vomslocalaccountoptie7 -all-fqans
+        When this option is set, this plugin will consider the ALL FQANs present in the credential.
+        The explicit setting of this flag will override any defaults.
+
 \section vomslocalaccountReturnvalue RETURN VALUES
         \li LCMAPS_MOD_SUCCESS : Success
         \li LCMAPS_MOD_FAIL    : Failure
@@ -174,8 +184,8 @@
 static char *gridmapfile = NULL; /* filename of gridmapfile */
 static int pgid_mapping = 1;	/* default: map pGID from account */
 static int sgid_mapping = 1;	/* default: map sGIDs from account */
+static int first_fqan = 1;      /* default: only look at one FQAN per extension. */
 
-
 /************************************************************************
  * private prototypes
  ************************************************************************/
@@ -211,6 +221,8 @@
     int  add_primary_gid_as_secondary_gid_from_mapped_account = 0; /* pGID from acct as sGID */
     int  do_not_add_secondary_gids_from_mapped_account = 0; /* sGIDs not from acct */
     int  add_secondary_gids_from_mapped_account = 0; /* sGIDs from acct */
+    int  set_first_fqan                         = 0; /* Whether -first-fqan is set */
+    int  set_all_fqans                          = 0; /* Whether -all-fqans is set */
 
     /* Log commandline parameters on debug */
     lcmaps_log(LOG_DEBUG,"%s: passed arguments:\n",logstr);
@@ -336,6 +348,28 @@
 	    /* ok: set flag */
             use_account_gid = 1;
         }
+        else if ((strcmp(argv[i], "-first-fqan") == 0) ||
+                 (strcmp(argv[i], "--first-fqan") == 0))
+        {
+            set_first_fqan = 1;
+            if (set_all_fqans) {
+                lcmaps_log(LOG_ERR,
+                    "%s: cannot specify both %s and -all-fqans\n",
+                    logstr, argv[i]);
+                goto fail_init_module;
+            }
+        }
+        else if ((strcmp(argv[i], "-all-fqans") == 0) ||
+                 (strcmp(argv[i], "--all-fqans") == 0))
+        {
+            set_all_fqans = 1;
+            if (set_first_fqan) {
+                lcmaps_log(LOG_ERR,
+                    "%s: cannot specify both %s and -first-fqan\n",
+                    logstr, argv[i]);
+                goto fail_init_module;
+            }
+        }
 	/* any other argument is an error */
 	else
 	{
@@ -379,6 +413,9 @@
     else if (add_secondary_gids_from_mapped_account)
 	sgid_mapping=1;
 
+    if (set_first_fqan) {first_fqan = 1;}
+    else if (set_all_fqans) {first_fqan = 0;}
+
     return LCMAPS_MOD_SUCCESS;
 
 fail_init_module:
@@ -543,7 +579,9 @@
     int                 cnt_sec_gid  = 0;
     gid_t *             sec_gid      = NULL;
     int                 voms_verification = 1;
+    char *              last_vo      = NULL;
 
+
     /* Set suitable logstr */
     if (lcmaps_mode == PLUGIN_RUN)
         logstr = PLUGIN_PREFIX"-plugin_run()";
@@ -654,6 +701,41 @@
     /* Try to match the VO strings with the grid-mapfile, normally the first
      * available VO string should match */
     for (i = 0; i < nfqan; i++) {
+        /* Calculate the VO of the current FQAN */
+        if (fqan_list[i][0] != '/') {
+            lcmaps_log(LOG_DEBUG,
+                "%s: Invalid-format for FQAN: %s.\n",
+                logstr,
+                fqan_list[i]);
+            continue;
+        }
+        if (first_fqan) {
+            char *vo_index = index(fqan_list[i]+1, '/');
+            char *cur_vo = NULL;
+            if (vo_index == NULL) {
+                cur_vo = strdup(fqan_list[i]+1);
+            } else {
+                cur_vo = strndup(fqan_list[i]+1, vo_index-fqan_list[i]-1);
+            }
+            if (last_vo && !strcmp(last_vo, cur_vo)) {
+                lcmaps_log(LOG_DEBUG,
+                    "%s: Skipping additional FQAN %s from VO %s.\n",
+                    logstr,
+                    fqan_list[i],
+                    cur_vo);
+                free(cur_vo);
+                continue;
+            } else {
+                free(last_vo);
+                last_vo = cur_vo;
+                cur_vo = NULL;
+                lcmaps_log(LOG_DEBUG,
+                    "%s: Matching FQANs for VO %s.\n",
+                    logstr,
+                    last_vo);
+            }
+        }
+
         rc = lcmaps_gridmapfile(gridmapfile, fqan_list[i], searchstr, options,
 				&username);
 
@@ -749,6 +831,7 @@
     if (req_username_needs_free)
 	free(req_username);
     free(username);
+    free(last_vo);
 
     lcmaps_log(LOG_INFO,"%s: voms_localaccount plugin succeeded\n", logstr);
 
@@ -758,6 +841,7 @@
     if (req_username_needs_free)
 	free(req_username);
     free(username);
+    free(last_vo);
 
     lcmaps_log(LOG_INFO,"%s: voms_localaccount plugin failed\n", logstr);
 
